{"name":"Harness","tagline":"A framework for composable applications everywhere .Net runs","body":"#Harness#\r\n\r\nA framework for Composable applications everywhere .net runs.\r\nTargets .Net 4.5, SL5, Windows 8, Windows Phone 8, iOS, and Android.\r\nAll under the Apache 2.0 License.\r\n\r\n###WARNING: This project requires the Roslyn End User Preview###\r\nBecause C# 6 is fantastic.\r\n\r\n(Also requires some NuGet packages: Microsoft Async, Rx, JSON.Net)\r\n\r\nPicking up the declarative method style that started with LINQ, Harness is a framework for composing applications from rich expressions. \r\n\r\nWhy not Try/Catch/Finally in a single expression:\r\n\r\n```csharp\r\nthis.Try(x => {\r\n  Some.Statements;\r\n  return true;\r\n}).Catch<InvalidOperationException>((x,ex) => true)\r\n.Catch<Exception>((x,ex) => false)\r\n.Act()\r\n```\r\nHow about a cast that reads like one:\r\n\r\n```csharp\r\nthis.AsType<IInterface>();\r\n```\r\nMaking Strings more fun:\r\n\r\n```csharp\r\n\"{0} World\".WithParams(\"Hello\");\r\n\"Some String\".Match(\"REGEX\");\r\n\"Some Other String\".Matches(\"Regex\").Each( ... );\r\n```\r\n\r\nEasily create Tasks:\r\n\r\n```csharp\r\nawait this.AsTask(x => Some.LongRunning.Operation());\r\nawait SomeCollection.EachAsync( ... );\r\n```\r\nCompare assignable Types:\r\n```csharp\r\nthis.Is<SomeType>(); // true or false\r\ntypeof(SomeType).Is<IInterface>();\r\n```\r\n\r\nHow about a rich IOC Provider (implementing a variation of the CSLP):\r\n```csharp\r\nProvider.Get<IDependency>();\r\nProvider.GetAll<IService>();\r\nProvider.Get(someType).AsType<SomeType>()\r\n```\r\n(Currently we support Autofac, but there is a rich abstraction around IOC so we could support any IOC Container)\r\n\r\nAnd a DomainProvider, which provides Type services even in PCLs:\r\n```csharp\r\nProvider.Domain.Types;\r\nProvider.Domain.Assemblies;\r\nProvider.Domain.GetDefault<T>();\r\nProvider.Domain.GetDefault(typeof(T));\r\nProvider.Domain.Cast<TY>(object)\r\n```\r\n**And So Much More!**\r\n\r\nDo you Caliburn.Micro? We do to! Harness has a bootstrapper for the upcoming Caliburn.Micro 2.0.\r\n\r\n**Whats Next?**\r\n\r\nWorking to bring back some of the platforms Harness has supported in previous iterations:\r\n\r\n* Windows Runtime\r\n* Asp.Net MVC\r\n* Web Api\r\n* OWIN\r\n\r\nMore IOC Container:\r\n\r\n* TinyIOC\r\n* MEF\r\n* StructureMap\r\n\r\nAND a whole bunch of source cleanup. :)\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}